/*
 * Copyright (c) 2007-2015 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

evaluationDependsOn( ":cascading-jdbc-core" )

ext.derbyVersion = "10.11.1.1"

dependencies{
  compile project( ':cascading-jdbc-core' )

  compile( group: 'org.apache.derby', name: 'derby', version: derbyVersion )
  compile( group: 'org.apache.derby', name: 'derbyclient', version: derbyVersion )
  compile( group: 'org.apache.derby', name: 'derbynet', version: derbyVersion )

  testCompile project( ':cascading-jdbc-core' ).sourceSets.test.runtimeClasspath
}

task configInfo() << {
  ( configurations.compile.minus([configurations.provided])).each{ entry ->
    println entry
  }
}


task myJar( type: Jar ) {
    classifier = 'provider'
    dependsOn configurations.runtime
    from {
      ( configurations.compile.minus([configurations.provided])).collect{
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

}
