/*
 * Copyright (c) 2007-2015 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.1'
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
  }
}

apply from: 'etc/version.gradle'

version = releaseVersion

// the version of hadoop used for compiling and testing
ext.hadoopVersion = "2.6.0"
ext.tezVersion = "0.6.1"

ext.cascadingVersion = '3.0.0'
ext.lingualVersion = '2.0.0-wip-+'

ext.timestamp = new SimpleDateFormat( "yyyyMMdd" ).format( new Date() )

allprojects {

  group = 'cascading'
  version = releaseVersion

  repositories {
    mavenLocal()
    mavenCentral()
    maven{ url 'http://conjars.org/repo/' }
    maven{ url 'http://repo.pentaho.org/artifactory/repo/' }
  }

  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'maven'
  apply plugin: 'eclipse'
  apply plugin: 'provided-base'
  apply plugin: 'com.github.johnrengelman.shadow'

}

subprojects{

  dependencies {
  
    provided group: 'cascading', name: 'cascading-hadoop2-tez', version: cascadingVersion, changing: true
    provided group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
    provided group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5'
    provided( group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion )
    provided( group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version: hadoopVersion )
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
    testCompile group: 'cascading', name: 'cascading-core', version: cascadingVersion, classifier: 'tests'
    testRuntime group: 'log4j', name: 'log4j', version: '1.2.17'

    // only used in tests, not in the production code.
    testCompile(group: 'cascading', name: 'lingual-core', version: lingualVersion ){
      exclude group: 'xerces'
    }

    testCompile( group: 'org.apache.tez', name: 'tez-tests', version: tezVersion, classifier: 'tests' )
    testCompile( group: 'org.apache.tez', name: 'tez-api', version: tezVersion )
    testCompile( group: 'org.apache.tez', name: 'tez-dag', version: tezVersion )
    testCompile( group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion )
  }

  test {
    if ( System.getProperty('DEBUG', 'false') == 'true' ) {
      jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
    }
  }

  task sourcesJar( type: Jar, dependsOn: classes ) {
    from sourceSets.main.allSource
    classifier = 'sources'
  }

  task javadocJar( type: Jar, dependsOn: javadoc ) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  task testsJar( type: Jar, dependsOn: testClasses ) {
    from sourceSets.test.output
    classifier = 'tests'
  }

  task testSourcesJar( type: Jar, dependsOn: classes ) {
    from sourceSets.test.allSource
    classifier = 'test-sources'
  }

  configurations {
    testArtifacts {
      extendsFrom testRuntime
    }
  }

  artifacts {
    archives jar
    archives shadowJar
    archives sourcesJar
    archives javadocJar
    archives testsJar
    archives testSourcesJar
    testArtifacts testsJar
    testArtifacts testSourcesJar
  }

  uploadArchives {

    def deployer = repositories.mavenDeployer {
      configuration = configurations.archives

      repository( url: repoUrl ) {
        authentication( userName: repoUserName, password: repoPassword )
      }

      pom.project {
        description 'Cascading JDBC is a collection of adapters for JDBC.'
        inceptionYear '2013'
        url 'http://cascading.org/'
        scm {
          url 'https://github.com/Cascading/cascading-jdbc.git'
        }
        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }
      }
    }
    [install.repositories.mavenInstaller, deployer]*.pom*.whenConfigured { pom ->
      def scopeOrder = [test: 1, runtime: 2, provided: 3, compile: 4].withDefault { 100 }
      pom.dependencies = pom.dependencies.sort { scopeOrder[it.scope] }
    }
  }

  jar {
    manifest {
      attributes( "Build-Date": "${timestamp}" )
    }
  }

  shadowJar {
    classifier = "provider"
    configurations = []
    from {
      project.configurations.runtime.minus( [ project.configurations.provided ] )
    }
    mergeServiceFiles()

    exclude 'LICENSE'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/LICENSE*'
  }

  task createFrameworkProperties( dependsOn: processResources ) << {
    if ( project.name != "cascading-jdbc-core" ) {
      file( "${sourceSets.main.output.resourcesDir}/cascading" ).mkdirs()
      file( "${sourceSets.main.output.resourcesDir}/cascading/framework.properties").write("name=${project.name}:${version}\n" )
    }
  }

  jar.dependsOn( createFrameworkProperties )
  shadowJar.dependsOn( createFrameworkProperties )

}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

eclipse {
  classpath {
    defaultOutputDir = file( 'build' )
    downloadSources = true
    downloadJavadoc = true
  }
}

